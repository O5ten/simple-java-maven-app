import groovy.json.JsonSlurperClassic 
def payload = new groovy.json.JsonSlurperClassic().parseText(requestPayload)

pipeline {
    agent {
        label "maven"
    }
    
    environment {
        DOCKER_OPTS = "--config /checkout/.docker"
        REGISTRY_URL = "https://${DTR_REGISTRY}"
        SOURCE_IMAGE = "${payload.contents.sourceRepository}"
        SOURCE_TAG = "${payload.contents.sourceTag}"
        TARGET_IMAGE = "${payload.contents.targetRepository}"
        TARGET_TAG = "${payload.contents.targetTag}"
    }

    stages {
        stage('Setup Docker Config') {
            steps {
                container('jnlp') {
                    withCredentials([[$class: 'FileBinding', credentialsId: 'dct_repo_key', variable: 'REPOSITORY_SIGNING_KEY'],
                        [$class: 'FileBinding', credentialsId: 'ca.crt', variable: 'DTR_CA_CRT']]) {
                        dir("/checkout/.docker/tls/${DTR_REGISTRY}") {
                            sh 'cp -p "$DTR_CA_CRT" ca.crt'
                            sh 'chmod 600 ca.crt'
                        }
                        dir('/checkout/.docker/trust/private') {
                            sh 'cp -p "$REPOSITORY_SIGNING_KEY" .'
                        }
                    }   
                }
            }
        }
        stage('Pull Image') {
            steps {
                container('alpine-utils') {
                    withCredentials([usernamePassword(credentialsId: 'jenkins', passwordVariable: 'REGISTRY_PASS', usernameVariable: 'REGISTRY_USER')]) {
                        sh """
                            docker version
                            docker ${DOCKER_OPTS} login -u ${REGISTRY_USER} -p ${REGISTRY_PASS} ${REGISTRY_URL}
                            docker ${DOCKER_OPTS} image pull ${DTR_REGISTRY}/${TARGET_IMAGE}:${TARGET_TAG}
                        """
                    }
                }
            }
        }

        stage('Sign Image') {
            steps {
                container('alpine-utils') {
                    withCredentials([[$class: 'StringBinding', credentialsId: 'dct_root_passphrase', variable: 'ROOT_SIGNING_PASSPHRASE'],
                        [$class: 'StringBinding', credentialsId: 'dct_repo_passphrase', variable: 'REPOSITORY_SIGNING_PASSPHRASE'],
                        [$class: 'StringBinding', credentialsId: 'dct_delegation_passphrase', variable: 'DELEGATION_PASSPHRASE'],
                        [$class: 'FileBinding', credentialsId: 'dct_repo_key', variable: 'REPOSITORY_SIGNING_KEY'],
                        [$class: 'FileBinding', credentialsId: 'ca.crt', variable: 'DTR_CA_CRT'],
                        [$class: 'UsernamePasswordMultiBinding', credentialsId: 'jenkins', usernameVariable: 'REGISTRY_USER', passwordVariable: 'REGISTRY_PASS']]) {
                        
                        withEnv(["DOCKER_CONTENT_TRUST=1",
                            "DOCKER_CONTENT_TRUST_ROOT_PASSPHRASE=$ROOT_SIGNING_PASSPHRASE",
                            "DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE=$REPOSITORY_SIGNING_PASSPHRASE"]) {
                            sh """
                                docker ${DOCKER_OPTS} image tag ${DTR_REGISTRY}/${TARGET_IMAGE}:${TARGET_TAG} ${DTR_REGISTRY}/${TARGET_IMAGE}:${TARGET_TAG}-signed
                                docker ${DOCKER_OPTS} image push ${DTR_REGISTRY}/${TARGET_IMAGE}:${TARGET_TAG}-signed
                            """
                        }    
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                def summaryString = """\
                Promotion Summary:
                    Source Image Name: ${SOURCE_IMAGE}:${SOURCE_TAG}
                    Target Image Name: ${TARGET_IMAGE}:${TARGET_TAG}
                    Location: ${payload.location}""".stripIndent()
                currentBuild.displayName = "#${env.BUILD_NUMBER} - Triggered by PROMOTION webhook for ${SOURCE_IMAGE}:${SOURCE_TAG}"
                currentBuild.description = summaryString
            }
        }
    }
}
